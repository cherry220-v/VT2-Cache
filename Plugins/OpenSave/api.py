from typing import List, Optional, Any

class QApplication():
    def __init__(self): """PyQt6.QtWidgets.QApplication"""

class QMainWindow():
    def __init__(self): """PyQt6.QtWidgets.QMainWindow"""

class QObject():
    def __init__(self): """PyQt6.QtCore.QObject"""

class QFileSystemModel():
    def __init__(self): """PyQt6.QtGui.QFileSystemModel"""

class QAction():
    def __init__(self): """PyQt6.QtGui.QAction"""

class QTextCursor():
    def __init__(self): """PyQt6.QtGui.QTextCursor"""

class QWidget():
    def __init__(self): """PyQt6.QtWidgets.QWidget"""

class QDialog():
    def __init__(self): """PyQt6.QtWidgets.QDialog"""

class QLayout():
    def __init__(self): """PyQt6.QtWidgets.QLayout"""

class QDockWidget():
    def __init__(self): """PyQt6.QtWidgets.QDockWidget"""

class QTabWidget():
    def __init__(self): """PyQt6.QtWidgets.QTabWidget"""

class QThread():
    def __init__(self): """PyQt6.QtCore.QThread"""

class QProcess():
    def __init__(self): """PyQt6.QtCore.QProcess"""

def pyqtSignal(*args): """QtCore.pyqtSignal"""

class VtAPI:
    def __init__(self, app: Optional["QApplication"] = None) -> None:
        self.STATEFILE: Optional[str]
        self.INFO: str
        self.WARNING: str
        self.ERROR: str
    class Window:
        def __init__(self, api: "VtAPI", id: str | None = None, views: Optional[List['VtAPI.View']] = None, activeView: Optional['VtAPI.View'] = None) -> None:
            self.views: List['VtAPI.View']
            self.activeView: Optional['VtAPI.View']
            self.model: QFileSystemModel
            self.id = id
        def newFile(self) -> 'VtAPI.View': ...
        def openFiles(self, files: List[str]) -> None: ...
        def saveFile(self, view: Optional['VtAPI.View'] = None, dlg: bool = False) -> None: ...
        def activeView(self) -> 'VtAPI.View': ...
        def views(self) -> List['VtAPI.View']: ...
        @property
        def signals(self) -> 'VtAPI.Signals': ...
        def setTitle(self, s: str) -> None: ...
        def focus(self, view: 'VtAPI.View') -> None: ...
        def registerCommandClass(self, data: dict) -> None: ...
        def registerCommand(self, data: dict) -> None: ...
        def runCommand(self, command: dict) -> None: ...
        def addToolBar(self, items: List[QAction], flags: List[int] = []) -> None: ...
        def getCommand(self, name: str) -> Optional[dict]: ...
        def getTheme(self) -> str: ...
        def setTheme(self, theme: str) -> None: ...
        def getLog(self) -> str: ...
        def setLogMsg(self, msg: str, t: str = "") -> None: ...
        def getTreeModel(self) -> QFileSystemModel: ...
        def getModelElement(self, i: int) -> str: ...
        def setTreeWidgetDir(self, dir: str) -> QFileSystemModel: ...
        def setTab(self, i: int) -> None: ...
        def updateMenu(self, menu: str, data: dict) -> None: ...
        def addDockWidget(self, areas: int, dock: 'VtAPI.Widgets.DockWidget') -> None: ...
        def showDialog(self, content: QLayout, flags: int = 0, location: int = -1, width: int = 320, height: int = 240, on_navigate: Optional[callable] = None, on_hide: Optional[callable] = None) -> None: ...
        def isDockWidget(self, area: int) -> Optional[QDockWidget]: ...
        def statusMessage(self, text: str, timeout: Optional[int] = None) -> None: ...
    class View:
        def __init__(self, api: "VtAPI", window: 'VtAPI.Window', qwclass: Optional[QWidget] = None) -> None:
            self.api: VtAPI
            self.id: Optional[str]
            self.tagBase: Optional[object]
        def __eq__(self, other: object) -> bool: ...
        def id(self) -> Optional[str]: ...
        def update(self) -> None: ...
        def __hash__(self) -> int: ...
        def tabIndex(self) -> int: ...
        def close(self) -> None: ...
        def window(self) -> 'VtAPI.Window': ...
        def getTitle(self) -> str: ...
        def setTitle(self, text: str) -> None: ...
        def getText(self) -> str: ...
        def getHtml(self) -> str: ...
        def setText(self, text: str) -> str: ...
        def getFile(self) -> Optional[str]: ...
        def setFile(self, file: str) -> str: ...
        def getCanSave(self) -> bool: ...
        def setCanSave(self, b: bool) -> bool: ...
        def getCanEdit(self) -> bool: ...
        def setReadOnly(self, b: bool) -> bool: ...
        def getEncoding(self) -> str: ...
        def setEncoding(self, enc: str) -> str: ...
        def getSaved(self) -> bool: ...
        def setSaved(self, b: bool) -> bool: ...
        def size(self) -> int: ...
        def substr(self, region: 'VtAPI.Region') -> str: ...
        def insert(self, string: str, point: Optional['VtAPI.Point'] = None) -> None: ...
        def erase(self, region: 'VtAPI.Region') -> None: ...
        def replace(self, region: 'VtAPI.Region', string: str) -> None: ...
        def undo(self) -> None: ...
        def redo(self) -> None: ...
        def cut(self) -> None: ...
        def copy(self) -> None: ...
        def paste(self) -> None: ...
        def selectAll(self) -> None: ...
        def setSyntax(self, data: Optional[dict] = None, path: Optional[str] = None) -> None: ...
        def isDirty(self) -> bool: ...
        def isReadOnly(self) -> bool: ...
        def getTextSelection(self) -> str: ...
        def getTextCursor(self) -> QTextCursor: ...
        def setTextSelection(self, s: int, e: int) -> None: ...
        def getCompletePos(self) -> tuple[str, int, int]: ...
        def setCompleteList(self, lst: list) -> None: ...
        def setHighlighter(self, hl: dict) -> None: ...
        def rehighlite(self) -> None: ...
        def setMmapHidden(self, b: bool) -> None: ...
        def isMmapHidden(self) -> bool: ...
        def initTagFile(self, path: str) -> None: ...
        def getTags(self, path: str) -> list: ...
        def addTag(self, path: str, tag: str) -> None: ...
        def removeTag(self, path: Optional[str] = None, tag: Optional[str] = None, show: bool = False) -> None: ...
        def getTagFiles(self, tag: str) -> list: ...
    class Selection:
        def __init__(self, regions: Optional[List['VtAPI.Region']] = None) -> None: ...
        def clear(self) -> None: ...
        def add(self, region: 'VtAPI.Region') -> None: ...
        def subtract(self, region: 'VtAPI.Region') -> None: ...
        def contains(self, point: 'VtAPI.Point') -> bool: ...
        def text(self, view: 'VtAPI.View', region: 'VtAPI.Region') -> str: ...
    class Region:
        def __init__(self, a: int, b: int) -> None: ...
        def begin(self) -> int: ...
        def end(self) -> int: ...
        def contains(self, point: int) -> bool: ...
    class Settings:
        def __init__(self, settings: Optional[dict] = None) -> None: ...
        def get(self, key: str, default: Optional[str] = None) -> Optional[str]: ...
        def set(self, key: str, value: str) -> None: ...
        def erase(self, key: str) -> None: ...
        def has(self, key: str) -> bool: ...
    class Dialogs:
        @staticmethod
        def infoMessage(string: str, title: Optional[str] = None) -> None: ...
        @staticmethod
        def warningMessage(string: str, title: Optional[str] = None) -> None: ...
        @staticmethod
        def errorMessage(string: str, title: Optional[str] = None) -> None: ...
        @staticmethod
        def okCancelDialog(string: str, title: Optional[str] = None) -> bool: ...
        @staticmethod
        def yesNoCancelDialog(string: str, title: Optional[str] = None) -> str: ...
        @staticmethod
        def openFileDialog(title: Optional[str] = None) -> List[str]: ...
        @staticmethod
        def saveFileDialog(title: Optional[str] = None) -> str: ...
        @staticmethod
        def openDirDialog(title: Optional[str] = None) -> str: ...
        @staticmethod
        def inputDialog(title: str = "") -> Optional[str]: ...
    class File:
        def __init__(self, path: str = None, encoding="utf-8"): ...
        def read(self, chunk=1024) -> List[str]: ...
        def exists(self) -> bool: ...
        def create(self, rewrite=False) -> None: ...
    class Theme:
        def __init__(self, name: str | None = None, path: str | None = None): ...
        def use(self, window: "VtAPI.Window" = None) -> None: ...
        def exists(self) -> bool: ...
    class Plugin:
        class TextCommand:
            def __init__(self, api: 'VtAPI', view: 'VtAPI.View') -> None: ...
            def run(self, edit: Any) -> None: ...
            def is_enabled(self) -> bool: ...
            def is_visible(self) -> bool: ...
            def description(self) -> str: ...
        class WindowCommand:
            def __init__(self, api: 'VtAPI', window: 'VtAPI.Window') -> None: ...
            def run(self) -> None: ...
            def is_enabled(self) -> bool: ...
            def is_visible(self) -> bool: ...
            def description(self) -> str: ...
        class ApplicationCommand:
            def __init__(self, api: 'VtAPI') -> None: ...
            def run(self) -> None: ...
            def is_enabled(self) -> bool: ...
            def is_visible(self) -> bool: ...
            def description(self) -> str: ...
    class Point:
        def __init__(self, x: int = 0, y: int = 0) -> None:
            self.x = x
            self.y = y
        def move(self, dx: int, dy: int) -> None: ...
        def distance_to(self, other: 'VtAPI.Point') -> float: ...
        def __str__(self) -> str: ...
        def __eq__(self, other: 'VtAPI.Point') -> bool: ...
    class Signals(QObject):
        tabClosed = pyqtSignal(object)
        tabCreated = pyqtSignal()
        tabChanged = pyqtSignal()
        textChanged = pyqtSignal()
        windowClosed = pyqtSignal()
        windowStarted = pyqtSignal()
        fileOpened = pyqtSignal(object)
        fileSaved = pyqtSignal(object)
        def __init__(self, w: QMainWindow) -> None: ...
        def addSignal(self, signalName: str, signalArgs: list) -> None: ...
        def findSignal(self, signalName: str) -> pyqtSignal: ...
    class Widgets:
        class DockWidget(QDockWidget):
            def __init__(self, parent: Optional[QWidget] = None) -> None: ...
            def parent(self) -> Optional[QWidget]: ...
            def window(self) -> Optional[QMainWindow]: ...
        class Dialog(QDialog):
            def __init__(self, parent: Optional[QWidget] = None) -> None: ...
            def parent(self) -> Optional[QWidget]: ...
            def window(self) -> Optional[QMainWindow]: ...
        class Thread(QThread):
            def __init__(self) -> None: ...
            def parent(self) -> Optional[QWidget]: ...
        class Process(QProcess):
            def __init__(self) -> None: ...
    def activeWindow(self) -> 'Window': ...
    def windows(self) -> List['Window']: ...
    def addWindow(self, window: 'Window') -> None: ...
    def loadSettings(self, path: Optional[str] = None, pl: Optional[str] = None) -> dict: ...
    def saveSettings(self, data: dict, path: Optional[str] = None, pl: Optional[str] = None) -> None: ...
    def importModule(self, name: str) -> Any: ...
    def setTimeout(self, function: callable, delay: int) -> None: ...
    async def setTimeout_async(self, function: callable, delay: int) -> None: ...
    def version(self) -> str: ...
    def platform(self) -> str: ...
    def arch(self) -> str: ...
    def replaceConsts(self, data: dict, constants: dict) -> str: ...
    def findKey(self, p: str, d: dict) -> Optional[str]: ...
    def addKey(self, p: str, value: str, d: dict) -> None: ...
    def replacePaths(self, data: str) -> str: ...
    def defineLocale(self) -> str: ...
    def packagesPath(self) -> str: ...